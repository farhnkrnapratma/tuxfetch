#!/usr/bin/env bash
# shellcheck disable=SC1091,SC2154
# GitHub     : https://github.com/farhnkrnapratma/tuxfetch
# Maintainer : Farhan Kurnia Pratama <farhnkrnapratma@protonmail.com>

if [ -n "$1" ]; then
  case "$1" in
    --help|-h)
      echo -e "üêß Tuxfetch - Help\n"
      echo -e "Usage: tuxfetch [option]\n"
      echo "Options:"
      echo -e "\t--help      | -h : Print this help."
      echo -e "\t--version   | -v : Print the Tuxfetch current version."
      echo -e "\t--mailmap   | -m : Print the mailmap."
      exit 0
      ;;
    --mailmap|-m)
      echo -e "üêß Tuxfetch - Mailmap\n"
      echo "[1] Farhan Kurnia Pratama <farhnkrnapratma@protonmail.com>"
      exit 0
      ;;
    --version|-v)
      echo -e "üêß Tuxfetch - Version\n"
      echo "Version      : 0.1.0"
      echo "Release Date : Monday, February 17 2025 11:40 GMT+7"
      echo "Platform     : GNU/Linux"
      echo "License      : MIT"
      echo "GitHub       : https://github.com/farhnkrnapratma/tuxfetch"
      echo "Maintainer   : Farhan Kurnia Pratama <farhnkrnapratma@protonmail.com>"
      exit 0
      ;;
    *)
      echo "Invalid argument: '$1'"
      echo "Type 'tuxfetch --help' or 'tuxfetch -h' for help."
      exit 1
      ;;
  esac
fi

tuxfig="$HOME/.config/tuxfetch"

tuxer() {
  cat <<-'EOF' > "$tuxfig/init"
# GitHub     : https://github.com/farhnkrnapratma/tuxfetch
# Maintainer : Farhan Kurnia Pratama <farhnkrnapratma@protonmail.com>

tuxify() {
  yield title
  yield newline
  yield " ÔÄá  User     " txuser
  yield " Û∞íç  Host     " txhost
  yield " Óúí  Distro   " txdistro
  yield " Ó∫ß  OS       " txos
  yield " Ó∫®  Kernel   " txkernel
  yield " Û∞•î  Clock    " txclock
  yield " Óº∑  Date     " txdate
  yield " Û±êã  Power    " txpower
  yield " Û±®∫  Uptime   " txuptime
  yield newline
}

# Tuxfetch Options

# Tuxtitle
tuxtitle=" üêß Tuxfetch"

# Host
# Options     : "full", "short"
# Default     : "short"
host="short"

# Distro
# Options     : "short", "full"
# Default     : "full"
distro="full"

# Kernel
# Options     : "no_arch", "no_version", "short", "full"
# Default     : "full"
kernel="full"

# Clock
# Options     : "h24_full", "h12_full", "h24_no_second", "h12_no_second",
#               "h24_no_tz", "h12_no_tz", "h24_short", "h12_short", "<custom>"
# Default     : "h24_full"
clock="h24_full"

# Date
# Options     : "long", "short", "long_short", "long_no_day", "long_nd_short",
#               "short_year" "<custom>"
# Default     : "long"
date="long"

# Power
# Options     : "full", "hide_type", "hide_plugged", "hide_unplugged", "no_status"
# Default     : "full"
power="full"

# Uptime
# Options     : "full", "no_second", "tiny", "tiny_no_second"
# Default     : "tiny_no_second"
uptime="tiny_no_second"

# Separator
# Options     : "hide", "<separator>"
# Default     : ":"
separator=":"

# Available Colors

# Standard Colors      # Bright Colors
# 0  = Red             # 7  = Bright Red
# 1  = Green           # 8  = Bright Green
# 2  = Yellow          # 9  = Bright Yellow
# 3  = Blue            # 10 = Bright Blue
# 4  = Magenta         # 11 = Bright Magenta
# 5  = Cyan            # 12 = Bright Cyan
# 6  = White           # 13 = Bright White

# Global Color
# Options     : "no", "<color_number>"
# Default     : "no"
globalcl="no"

# Tuxtitle Color
tuxtitlecl="5"

# Text Color
textcl="5"

# Separator Color
separatorcl="13"

# User Color
usercl="3"

# Host Color
hostcl="4"

# Distro Color
distrocl="0"

# OS Color
oscl="2"

# Kernel Color
kernelcl="1"

# Clock Color
clockcl="1"

# Date Color
datecl="2"

# Battery Color
batterycl="5"

# Uptime Color
uptimecl="10"
EOF
}

if [ ! -e "$tuxfig/init" ]; then
  mkdir -p "$tuxfig"
  tuxer
fi

source "$tuxfig/init"

colors=(31 32 33 34 35 36 37 91 92 93 94 95 96 97)

case "$globalcl" in
  [0-9]|1[0-3])
    tuxtitlecl=$globalcl
    textcl=$globalcl
    separatorcl=$globalcl
    usercl=$globalcl
    hostcl=$globalcl
    distrocl=$globalcl
    oscl=$globalcl
    kernelcl=$globalcl
    uptimecl=$globalcl
    ;;
  no|*)
    ;;
esac

txuser() {
  echo -e "\e[${colors[usercl]}m$(whoami)\e[0m"
}

txhost() {
  local hostn hostn_fqdn uname_hostn

  if command -v hostname >/dev/null 2>&1; then
    hostn=$(hostname)
    hostn_fqdn=$(hostname -f)
  fi
  uname_hostn=$(uname -n)

  if command -v hostname >/dev/null 2>&1; then
    case "$host" in
      full)
        echo -e "\e[${colors[hostcl]}m$hostn_fqdn\e[0m"
        ;;
      short)
        echo -e "\e[${colors[hostcl]}m$hostn\e[0m"
        ;;
      *)
        echo -e "\e[${colors[hostcl]}m$hostn\e[0m"
        ;;
    esac
  else
    case "$host" in
      full|short)
        echo -e "\e[${colors[hostcl]}m$uname_hostn\e[0m"
        ;;
      *)
        echo -e "\e[${colors[hostcl]}m$uname_hostn\e[0m"
        ;;
    esac
  fi
}

txdistro() {
  local name version
  name=$(awk -F= '$1=="NAME" {gsub(/"/, "", $2); print $2}' /etc/os-release)
  version=$(awk -F= '$1=="VERSION" {gsub(/"/, "", $2); print $2}' /etc/os-release)

  case "$distro" in
    full)
      echo -e "\e[${colors[distrocl]}m$name $version\e[0m"
      ;;
    short)
      echo -e "\e[${colors[distrocl]}m$name\e[0m"
      ;;
    *)
      echo -e "\e[${colors[distrocl]}m$name $version\e[0m"
      ;;
  esac
}

txos() {
  echo -e "\e[${colors[oscl]}m$(uname -o)\e[0m"
}

txkernel() {
  local kname kvers karch
  kname=$(uname -s)
  kvers=$(uname -r)
  karch=$(uname -m)

  case "$kernel" in
    full)
      echo -e "\e[${colors[kernelcl]}m$kname $kvers $karch\e[0m"
      ;;
    no_arch)
      echo -e "\e[${colors[kernelcl]}m$kname $kvers\e[0m"
      ;;
    no_version)
      echo -e "\e[${colors[kernelcl]}m$kname $karch\e[0m"
      ;;
    short)
      echo -e "\e[${colors[kernelcl]}m$kname\e[0m"
      ;;
    *)
      echo -e "\e[${colors[kernelcl]}m$kname $kvers $karch\e[0m"
      ;;
  esac
}

txclock() {
  local h24 h12 m s tz h12fmt
  h24=$(date +"%H")
  h12=$(date +"%I")
  h12fmt=$(date +"%p")
  m=$(date +"%M")
  s=$(date +"%S")
  tz=$(date +"%Z")

  case "$clock" in
    h24_full)
      echo -e "\e[${colors[clockcl]}m$h24:$m:$s $tz\e[0m"
      ;;
    h12_full)
      echo -e "\e[${colors[clockcl]}m$h12:$m:$s $h12fmt $tz\e[0m"
      ;;
    h24_no_second)
      echo -e "\e[${colors[clockcl]}m$h24:$m $tz\e[0m"
      ;;
    h12_no_second)
      echo -e "\e[${colors[clockcl]}m$h12:$m $h12fmt $tz\e[0m"
      ;;
    h24_no_tz)
      echo -e "\e[${colors[clockcl]}m$h24:$m:$s\e[0m"
      ;;
    h12_no_tz)
      echo -e "\e[${colors[clockcl]}m$h12:$m:$s $h12fmt\e[0m"
      ;;
    h24_short)
      echo -e "\e[${colors[clockcl]}m$h24:$m\e[0m"
      ;;
    h12_short)
      echo -e "\e[${colors[clockcl]}m$h12:$m $h12fmt\e[0m"
      ;;
    *)
      echo -e "\e[${colors[clockcl]}m$clock\e[0m"
      ;;
  esac
}

txdate() {
  local ldate lday sday lmonth lsmonth smonth lyear syear
  ldate=$(date +"%d")
  lday=$(date +"%A")
  sday=$(date +"%a")
  lmonth=$(date +"%B")
  lsmonth=$(date +"%b")
  smonth=$(date +"%m")
  lyear=$(date +"%Y")
  syear=$(date +"%y")

  case "$date" in
    long)
      echo -e "\e[${colors[datecl]}m$lday, $ldate $lmonth $lyear\e[0m"
      ;;
    short)
      echo -e "\e[${colors[datecl]}m$ldate/$smonth/$lyear\e[0m"
      ;;
    long_short)
      echo -e "\e[${colors[datecl]}m$sday, $ldate $lsmonth $lyear\e[0m"
      ;;
    long_no_day)
      echo -e "\e[${colors[datecl]}m$ldate $lmonth $lyear\e[0m"
      ;;
    long_nd_short)
      echo -e "\e[${colors[datecl]}m$ldate $lsmonth $lyear\e[0m"
      ;;
    short_year)
      echo -e "\e[${colors[datecl]}m$ldate/$smonth/$syear\e[0m"
      ;;
    *)
      echo -e "\e[${colors[datecl]}m$date\e[0m"
      ;;
  esac
}

txpower() {
  local BAT0cap BAT0sts ADP1 ADP1sts AC ACsts TYPE

  if [ -f "/sys/class/power_supply/BAT0/capacity" ]; then
    BAT0cap=$(cat "/sys/class/power_supply/BAT0/capacity")
  else
    BAT0cap="N/A"
  fi

  if [ -f "/sys/class/power_supply/BAT0/status" ]; then
    BAT0sts=$(cat "/sys/class/power_supply/BAT0/status")
  else
    BAT0sts="Unknown"
  fi

  if [ -f "/sys/class/power_supply/ADP1/online" ]; then
    ADP1=$(cat "/sys/class/power_supply/ADP1/online")
    if [ "$ADP1" -eq 1 ]; then
      ADP1sts="Plugged"
    else
      ADP1sts="Unplugged"
    fi
  else
    ADP1="Unknown"
  fi

  if [ -f "/sys/class/power_supply/AC/online" ]; then
    AC=$(cat "/sys/class/power_supply/AC/online")
    if [ "$AC" -eq 1 ]; then
      ACsts="Plugged"
    else
      ACsts="Unplugged"
    fi
  else
    AC="Unknown"
  fi

  if [ -d "/sys/class/power_supply/BAT0" ]; then
    TYPE="Battery"
    case "$power" in
      full)
        echo -e "\e[${colors[powercl]}m$TYPE $BAT0cap% ($BAT0sts)\e[0m"
        ;;
      hide_type)
        echo -e "\e[${colors[powercl]}m$BAT0cap% ($BAT0sts)\e[0m"
        ;;
      hide_plugged)
        if [ "$BAT0sts" = "Charging" ]; then
          echo -e "\e[${colors[powercl]}m$TYPE $BAT0cap%\e[0m"
        else
          echo -e "\e[${colors[powercl]}m$TYPE $BAT0cap% ($BAT0sts)\e[0m"
        fi
        ;;
      hide_unplugged)
        if [ "$BAT0sts" = "Discharging" ]; then
          echo -e "\e[${colors[powercl]}m$TYPE $BAT0cap%\e[0m"
        else
          echo -e "\e[${colors[powercl]}m$TYPE $BAT0cap% ($BAT0sts)\e[0m"
        fi
        ;;
      no_status)
        echo -e "\e[${colors[powercl]}m$TYPE $BAT0cap%\e[0m"
        ;;
      *)
        echo -e "\e[${colors[powercl]}m$TYPE $BAT0cap% ($BAT0sts)\e[0m"
        ;;
    esac
  elif [ -d "/sys/class/power_supply/ADP1" ]; then
    TYPE="Adapter"
    case "$power" in
      full)
        echo -e "\e[${colors[powercl]}m$TYPE ($ADP1sts)\e[0m"
        ;;
      hide_type)
        echo -e "\e[${colors[powercl]}m$ADP1sts\e[0m"
        ;;
      hide_plugged)
        if [ "$ADP1" -eq 1 ]; then
          echo -e "\e[${colors[powercl]}m$TYPE\e[0m"
        else
          echo -e "\e[${colors[powercl]}m$TYPE ($ADP1sts)\e[0m"
        fi
        ;;
      hide_unplugged)
        if [ "$ADP1" -eq 0 ]; then
          echo -e "\e[${colors[powercl]}m$TYPE\e[0m"
        else
          echo -e "\e[${colors[powercl]}m$TYPE ($ADP1sts)\e[0m"
        fi
        ;;
      no_status)
        echo -e "\e[${colors[powercl]}m$TYPE\e[0m"
        ;;
      *)
        echo -e "\e[${colors[powercl]}m$TYPE ($ADP1sts)\e[0m"
        ;;
    esac
  elif [ -d "/sys/class/power_supply/AC" ]; then
    TYPE="AC"
    case "$power" in
      full)
        echo -e "\e[${colors[powercl]}m$TYPE ($ACsts)\e[0m"
        ;;
      hide_type)
        echo -e "\e[${colors[powercl]}m$ACsts\e[0m"
        ;;
      hide_plugged)
        if [ "$AC" -eq 1 ]; then
          echo -e "\e[${colors[powercl]}m$TYPE\e[0m"
        else
          echo -e "\e[${colors[powercl]}m$TYPE ($ACsts)\e[0m"
        fi
        ;;
      hide_unplugged)
        if [ "$AC" -eq 0 ]; then
          echo -e "\e[${colors[powercl]}m$TYPE\e[0m"
        else
          echo -e "\e[${colors[powercl]}m$TYPE ($ACsts)\e[0m"
        fi
        ;;
      no_status)
        echo -e "\e[${colors[powercl]}m$TYPE\e[0m"
        ;;
      *)
        echo -e "\e[${colors[powercl]}m$TYPE ($ACsts)\e[0m"
        ;;
    esac
  else
    echo -e "\e[${colors[powercl]}m[unknown_power_source]\e[0m"
  fi
}

txuptime() {
  local full no_second tiny tiny_no_second
  full=$(awk '{print int($1/3600)"hours "int(($1%3600)/60)"minutes "int($1%60)"seconds"}' /proc/uptime)
  no_second=$(awk '{print int($1/3600)"hours "int(($1%3600)/60)"minutes"}' /proc/uptime)
  tiny=$(awk '{print int($1/3600)"h "int(($1%3600)/60)"m "int($1%60)"s"}' /proc/uptime)
  tiny_no_second=$(awk '{print int($1/3600)"h "int(($1%3600)/60)"m"}' /proc/uptime)

  case "$uptime" in
    full)
      echo -e "\e[${colors[uptimecl]}m$full\e[0m"
      ;;
    no_second)
      echo -e "\e[${colors[uptimecl]}m$no_second\e[0m"
      ;;
    tiny)
      echo -e "\e[${colors[uptimecl]}m$tiny\e[0m"
      ;;
    tiny_no_second)
      echo -e "\e[${colors[uptimecl]}m$tiny_no_second\e[0m"
      ;;
    *)
      echo -e "\e[${colors[uptimecl]}m$tiny_no_second\e[0m"
      ;;
  esac
}

yield() {
  if [ "$#" -eq 2 ]; then
    case "$separator" in
      hide)
        echo -en "\e[${colors[textcl]}m$1\e[0m "
        ;;
      *)
        echo -en "\e[${colors[textcl]}m$1\e[0m \e[${colors[separatorcl]}m$separator\e[0m "
        ;;
    esac
    if declare -F "$2" > /dev/null; then
      "$2"
    else
      echo -e "[\e[${colors[0]}mError\e[0m: \e[${colors[3]}m'$2'\e[0m is not a function]"
    fi
  elif [ "$#" -eq 1 ]; then
    if declare -F "$1" > /dev/null; then
      "$1"
    elif [ "$1" = "newline" ]; then
      echo ""
    elif [ "$1" = "title" ]; then
      echo -e "\e[${colors[tuxtitlecl]}m$tuxtitle\e[0m"
    else
      echo -e "\e[${colors[textcl]}m$1\e[0m"
    fi
  else
    echo -e "Usage: yield \e[${colors[3]}m<prefix>\e[0m \e[${colors[5]}m<function>\e[0m"
    echo -e "       yield \e[${colors[3]}m<string/function>\e[0m"
  fi
}

tuxify