#!/usr/bin/env bash
#
# SPDX-License-Identifier: MIT
#
# tuxfetch
#
# Copyright (C) 2025-present Farhan Kurnia Pratama
#
# GitHub     : https://github.com/farhnkrnapratma/tuxfetch
# Maintainer : Farhan Kurnia Pratama <farhnkrnapratma@gmail.com>
#
latest_version="0.2.0-preview"
release_date="Thursday, February 20, 2025, 06:23 GMT+7"
release_code="TXF020P20250220T0623000700"
license="MIT License"
github_url="https://github.com/farhnkrnapratma/tuxfetch"

C="\e[1;36m"
R="\e[0m"

tuxman() {
  check_version=$(git ls-remote --tags "$github_url".git | sed -n 's?.*refs/tags/??p' | sed 's/\^{}//' | sort -V | tail -n 1)

  case "$1" in
    update|clean-update)
      if [[ "$check_version" != "v$latest_version" ]]; then
        echo -e "A new version of Tuxfetch (${C}$check_version${R}) is now available on GitHub."

        echo -en "Would you like to ${C}$1${R} now? [${C}Y${R}/${C}n${R}] "
        read -r update_option
        update_option=${update_option:-Y}

        case "$update_option" in
          Y|y)
            echo "Updating Tuxfetch..."
            git clone "$github_url".git "$HOME/tuxfetch"
            cd "$HOME/tuxfetch" || exit
            make "$1"
            cd "$HOME" || exit
            rm -rf "$HOME/tuxfetch"
            echo "Successfully updated Tuxfetch."
            ;;
          N|n)
            echo "Update canceled."
            ;;
          *)
            echo "Invalid option: '${C}$update_option${R}'. Aborted."
            ;;
        esac
      else
        echo -e "Tuxfetch (${C}v$latest_version${R}) is already up-to-date."
      fi
      ;;
    uninstall|clean-uninstall)
      echo -en "Would you like to ${C}$1${R} Tuxfetch? [${C}Y${R}/${C}n${R}] "
      read -r uninstall_option
      uninstall_option=${uninstall_option:-Y}

      case "$uninstall_option" in
        Y|y)
          echo "Uninstalling Tuxfetch..."
          case "$1" in
            uninstall)
              sudo rm -rf "/usr/bin/tuxfetch"
              ;;
            clean-uninstall)
              rm -rf "$HOME/.config/tuxfetch"
              sudo rm -rf "/usr/bin/tuxfetch"
              ;;
          esac
          echo "Successfully uninstalled Tuxfetch."
          ;;
        N|n)
          echo "Uninstall canceled."
          ;;
        *)
          echo "Invalid option: '${C}$uninstall_option${R}'. Aborted."
          ;;
      esac
      ;;
    *)
      echo "Invalid argument: '${C}$1${R}'. Aborted."
      ;;
  esac
}

options=(
  "${C}--help${R}            | ${C}-h${R}        Print this help."
  "${C}--version${R}         | ${C}-v${R}        Print the Tuxfetch current version."
  "${C}--mailmap${R}         | ${C}-mm${R}       Print the name and email of the maintainer."
  "${C}--update${R}          | ${C}-up${R}       Update Tuxfetch to the latest version."
  "${C}--clean-update${R}    | ${C}-cup${R}      Update Tuxfetch to the latest version and regenerate the configuration file."
  "${C}--uninstall${R}       | ${C}-un${R}       Uninstall Tuxfetch."
  "${C}--clean-uninstall${R} | ${C}-cun${R}      Uninstall Tuxfetch and remove the configuration file."
)
maintainer=("Farhan Kurnia Pratama <${C}farhnkrnapratma@gmail.com${R}> <${C}farhnkrnapratma@gmail.com${R}>")

if [ -n "$1" ]; then
  case "$1" in
    --help|-h)
      echo -e "Usage: ${C}tuxfetch${R} [${C}--option${R}|${C}-opt${R}]\n"
      echo "Options:"
      for option in "${!options[@]}"; do
        echo -e "\t${options[$option]}"
      done
      exit
      ;;
    --mailmap|-mm)
      for mailmap in "${!maintainer[@]}"; do
        echo -e "[${C}$((mailmap + 1))${R}] ${maintainer[$mailmap]}"
      done
      exit
      ;;
    --version|-v)
      echo -e "Version      : ${C}v$latest_version${R}"
      echo -e "Release Date : ${C}$release_date${R}"
      echo -e "Release Code : ${C}$release_code${R}"
      echo -e "License      : ${C}$license${R}"
      echo -e "GitHub       : ${C}$github_url${R}"
      exit
      ;;
    --update|-up)
      tuxman update
      exit
      ;;
    --clean-update|-cup)
      tuxman clean-update
      exit
      ;;
    --uninstall|-un)
      tuxman uninstall
      exit
      ;;
    --clean-uninstall|-cun)
      tuxman clean-uninstall
      exit
      ;;
    *)
      echo -e "Invalid argument: '${C}$1${R}'"
      echo -e "Type '${C}tuxfetch --help|-h${R}' for help."
      exit
      ;;
  esac
fi

tuxer() {
cat <<-EOF > $HOME/.config/tuxfetch/init
# GitHub     : https://github.com/farhnkrnapratma/tuxfetch
# Maintainer : Farhan Kurnia Pratama <farhnkrnapratma@gmail.com> <farhnkrnapratma@gmail.com>

tuxify() {
  yield "üêß Tuxfetch"
  yield newline
  yield "ÔÄá  User     " tuser
  yield "Û∞íç  Host     " thost
  yield "Óúí  Distro   " tdistro
  yield "Ó∫®  Kernel   " tkernel
  yield "Û∞•î  Clock    " tclock
  yield "Óº∑  Date     " tdate
  yield "Û±êã  Power    " tpower
  yield "Û±®∫  Uptime   " tuptime
  yield newline
}

# Tuxfetch Options

# Host
# Options     : "full", "short"
# Default     : "short"
host="short"

# Distro
# Options     : "short", "full"
# Default     : "full"
distro="full"

# Kernel
# Options     : "no_arch", "no_version", "short", "full"
# Default     : "full"
kernel="full"

# Clock
# Options     : "h24_full", "h12_full", "h24_no_second", "h12_no_second",
#               "h24_no_tz", "h12_no_tz", "h24_short", "h12_short", "<custom>"
# Default     : "h24_full"
clock="h24_full"

# Date
# Options     : "long", "short", "long_short", "long_no_day", "long_nd_short",
#               "short_year" "<custom>"
# Default     : "long"
date="long"

# Power
# Options     : "full", "hide_type", "hide_plugged", "hide_unplugged", "no_status"
# Default     : "full"
power="full"

# Uptime
# Options     : "full", "no_second", "tiny", "tiny_no_second"
# Default     : "tiny_no_second"
uptime="tiny_no_second"

# Separator
# Options     : "hide", "<separator>"
# Default     : ":"
separator=":"

# Available Colors

# 0  = Red             # 7  = Bright Red
# 1  = Green           # 8  = Bright Green
# 2  = Yellow          # 9  = Bright Yellow
# 3  = Blue            # 10 = Bright Blue
# 4  = Magenta         # 11 = Bright Magenta
# 5  = Cyan            # 12 = Bright Cyan
# 6  = White           # 13 = Bright White

# Global Color
# Options     : "no", "<color_number>"
# Default     : "no"
globalcl="no"

# Text Color
textcl="5"

# Separator Color
separatorcl="13"

# User Color
usercl="3"

# Host Color
hostcl="4"

# Distro Color
distrocl="0"

# Kernel Color
kernelcl="1"

# Clock Color
clockcl="1"

# Date Color
datecl="2"

# Battery Color
batterycl="5"

# Uptime Color
uptimecl="10"
EOF
}

if [ -f $HOME/.config/tuxfetch/init ]; then
  source $HOME/.config/tuxfetch/init
else
  echo -en "Configuration file not found, generate default configuration? [${C}Y${R}/${C}n${R}] "
  read -r tuxfig_option
  tuxfig_option=${tuxfig_option:-Y}
  case "$tuxfig_option" in
    Y|y)
      mkdir -p $HOME/.config/tuxfetch
      tuxer
      clear
      source $HOME/.config/tuxfetch/init
      ;;
    N|n)
      echo "Aborted."
      exit
      ;;
    *)
      echo "Invalid option: '${C}$tuxfig_option${R}'. Aborted."
      exit
      ;;
  esac
fi

cl=(31 32 33 34 35 36 37 91 92 93 94 95 96 97)

if [[ -z "$host" ]]; then
  host="short"
fi

if [[ -z "$distro" ]]; then
  distro="full"
fi

if [[ -z "$kernel" ]]; then
  kernel="full"
fi

if [[ -z "$clock" ]]; then
  clock="h24_full"
fi

if [[ -z "$date" ]]; then
  date="long"
fi

if [[ -z "$power" ]]; then
  power="full"
fi

if [[ -z "$uptime" ]]; then
  uptime="tiny_no_second"
fi

if [[ -z "$separator" ]]; then
  separator=":"
fi

if [[ -z "$globalcl" ]]; then
  globalcl="no"
fi

if [[ -z "$textcl" ]]; then
  textcl="5"
fi

if [[ -z "$separatorcl" ]]; then
  separatorcl="13"
fi

if [[ -z "$usercl" ]]; then
  usercl="3"
fi

if [[ -z "$hostcl" ]]; then
  hostcl="4"
fi

if [[ -z "$distrocl" ]]; then
  distrocl="0"
fi

if [[ -z "$kernelcl" ]]; then
  kernelcl="1"
fi

if [[ -z "$clockcl" ]]; then
  clockcl="1"
fi

if [[ -z "$datecl" ]]; then
  datecl="2"
fi

if [[ -z "$batterycl" ]]; then
  batterycl="5"
fi

if [[ -z "$uptimecl" ]]; then
  uptimecl="10"
fi

case "$globalcl" in
  [0-9]|1[0-3])
    textcl=$globalcl
    separatorcl=$globalcl
    usercl=$globalcl
    hostcl=$globalcl
    distrocl=$globalcl
    kernelcl=$globalcl
    uptimecl=$globalcl
    ;;
  no|*)
    ;;
esac

tuser() {
  echo -e "\e[${cl[usercl]}m$(whoami)\e[0m"
}

thost() {
  local hostn hostn_fqdn uname_hostn

  if command -v hostname >/dev/null 2>&1; then
    hostn=$(hostname)
    hostn_fqdn=$(hostname -f)
  fi
  uname_hostn=$(uname -n)

  if command -v hostname >/dev/null 2>&1; then
    case "$host" in
      full)
        echo -e "\e[${cl[hostcl]}m$hostn_fqdn\e[0m"
        ;;
      short)
        echo -e "\e[${cl[hostcl]}m$hostn\e[0m"
        ;;
      *)
        echo -e "\e[${cl[hostcl]}m$hostn\e[0m"
        ;;
    esac
  else
    case "$host" in
      full|short)
        echo -e "\e[${cl[hostcl]}m$uname_hostn\e[0m"
        ;;
      *)
        echo -e "\e[${cl[hostcl]}m$uname_hostn\e[0m"
        ;;
    esac
  fi
}

tdistro() {
  local name version
  name=$(awk -F= '$1=="NAME" {gsub(/"/, "", $2); print $2}' /etc/os-release)
  version=$(awk -F= '$1=="VERSION" {gsub(/"/, "", $2); print $2}' /etc/os-release)

  case "$distro" in
    full)
      echo -e "\e[${cl[distrocl]}m$name $version\e[0m"
      ;;
    short)
      echo -e "\e[${cl[distrocl]}m$name\e[0m"
      ;;
    *)
      echo -e "\e[${cl[distrocl]}m$name $version\e[0m"
      ;;
  esac
}

tkernel() {
  local kname kvers karch
  kname=$(uname -s)
  kvers=$(uname -r)
  karch=$(uname -m)

  case "$kernel" in
    full)
      echo -e "\e[${cl[kernelcl]}m$kname $kvers $karch\e[0m"
      ;;
    no_arch)
      echo -e "\e[${cl[kernelcl]}m$kname $kvers\e[0m"
      ;;
    no_version)
      echo -e "\e[${cl[kernelcl]}m$kname $karch\e[0m"
      ;;
    short)
      echo -e "\e[${cl[kernelcl]}m$kname\e[0m"
      ;;
    *)
      echo -e "\e[${cl[kernelcl]}m$kname $kvers $karch\e[0m"
      ;;
  esac
}

tclock() {
  local h24 h12 h12fmt tz m s
  h24=$(date +"%H")
  h12=$(date +"%I")
  h12fmt=$(date +"%p")
  tz=$(date +"%Z")
  m=$(date +"%M")
  s=$(date +"%S")

  case "$clock" in
    h24_full)
      echo -e "\e[${cl[clockcl]}m$h24:$m:$s $tz\e[0m"
      ;;
    h12_full)
      echo -e "\e[${cl[clockcl]}m$h12:$m:$s $h12fmt $tz\e[0m"
      ;;
    h24_no_second)
      echo -e "\e[${cl[clockcl]}m$h24:$m $tz\e[0m"
      ;;
    h12_no_second)
      echo -e "\e[${cl[clockcl]}m$h12:$m $h12fmt $tz\e[0m"
      ;;
    h24_no_tz)
      echo -e "\e[${cl[clockcl]}m$h24:$m:$s\e[0m"
      ;;
    h12_no_tz)
      echo -e "\e[${cl[clockcl]}m$h12:$m:$s $h12fmt\e[0m"
      ;;
    h24_short)
      echo -e "\e[${cl[clockcl]}m$h24:$m\e[0m"
      ;;
    h12_short)
      echo -e "\e[${cl[clockcl]}m$h12:$m $h12fmt\e[0m"
      ;;
    *)
      echo -e "\e[${cl[clockcl]}m$clock\e[0m"
      ;;
  esac
}

tdate() {
  local ldate lday sday lmonth lsmonth smonth lyear syear
  ldate=$(date +"%d")
  lday=$(date +"%A")
  sday=$(date +"%a")
  lmonth=$(date +"%B")
  lsmonth=$(date +"%b")
  smonth=$(date +"%m")
  lyear=$(date +"%Y")
  syear=$(date +"%y")

  case "$date" in
    long)
      echo -e "\e[${cl[datecl]}m$lday, $ldate $lmonth $lyear\e[0m"
      ;;
    short)
      echo -e "\e[${cl[datecl]}m$ldate/$smonth/$lyear\e[0m"
      ;;
    long_short)
      echo -e "\e[${cl[datecl]}m$sday, $ldate $lsmonth $lyear\e[0m"
      ;;
    long_no_day)
      echo -e "\e[${cl[datecl]}m$ldate $lmonth $lyear\e[0m"
      ;;
    long_nd_short)
      echo -e "\e[${cl[datecl]}m$ldate $lsmonth $lyear\e[0m"
      ;;
    short_year)
      echo -e "\e[${cl[datecl]}m$ldate/$smonth/$syear\e[0m"
      ;;
    *)
      echo -e "\e[${cl[datecl]}m$date\e[0m"
      ;;
  esac
}

tpower() {
  local BAT0cap BAT0sts ADP1 ADP1sts AC ACsts TYPE

  if [ -f "/sys/class/power_supply/BAT0/capacity" ]; then
    BAT0cap=$(cat "/sys/class/power_supply/BAT0/capacity")
  else
    BAT0cap="N/A"
  fi

  if [ -f "/sys/class/power_supply/BAT0/status" ]; then
    BAT0sts=$(cat "/sys/class/power_supply/BAT0/status")
  else
    BAT0sts="Unknown"
  fi

  if [ -f "/sys/class/power_supply/ADP1/online" ]; then
    ADP1=$(cat "/sys/class/power_supply/ADP1/online")
    if [ "$ADP1" -eq 1 ]; then
      ADP1sts="Plugged"
    else
      ADP1sts="Unplugged"
    fi
  else
    ADP1="Unknown"
  fi

  if [ -f "/sys/class/power_supply/AC/online" ]; then
    AC=$(cat "/sys/class/power_supply/AC/online")
    if [ "$AC" -eq 1 ]; then
      ACsts="Plugged"
    else
      ACsts="Unplugged"
    fi
  else
    AC="Unknown"
  fi

  if [ -d "/sys/class/power_supply/BAT0" ]; then
    TYPE="Battery"
    case "$power" in
      full)
        echo -e "\e[${cl[powercl]}m$TYPE $BAT0cap% ($BAT0sts)\e[0m"
        ;;
      hide_type)
        echo -e "\e[${cl[powercl]}m$BAT0cap% ($BAT0sts)\e[0m"
        ;;
      hide_plugged)
        if [ "$BAT0sts" = "Charging" ]; then
          echo -e "\e[${cl[powercl]}m$TYPE $BAT0cap%\e[0m"
        else
          echo -e "\e[${cl[powercl]}m$TYPE $BAT0cap% ($BAT0sts)\e[0m"
        fi
        ;;
      hide_unplugged)
        if [ "$BAT0sts" = "Discharging" ]; then
          echo -e "\e[${cl[powercl]}m$TYPE $BAT0cap%\e[0m"
        else
          echo -e "\e[${cl[powercl]}m$TYPE $BAT0cap% ($BAT0sts)\e[0m"
        fi
        ;;
      no_status)
        echo -e "\e[${cl[powercl]}m$TYPE $BAT0cap%\e[0m"
        ;;
      *)
        echo -e "\e[${cl[powercl]}m$TYPE $BAT0cap% ($BAT0sts)\e[0m"
        ;;
    esac
  elif [ -d "/sys/class/power_supply/ADP1" ]; then
    TYPE="Adapter"
    case "$power" in
      full)
        echo -e "\e[${cl[powercl]}m$TYPE ($ADP1sts)\e[0m"
        ;;
      hide_type)
        echo -e "\e[${cl[powercl]}m$ADP1sts\e[0m"
        ;;
      hide_plugged)
        if [ "$ADP1" -eq 1 ]; then
          echo -e "\e[${cl[powercl]}m$TYPE\e[0m"
        else
          echo -e "\e[${cl[powercl]}m$TYPE ($ADP1sts)\e[0m"
        fi
        ;;
      hide_unplugged)
        if [ "$ADP1" -eq 0 ]; then
          echo -e "\e[${cl[powercl]}m$TYPE\e[0m"
        else
          echo -e "\e[${cl[powercl]}m$TYPE ($ADP1sts)\e[0m"
        fi
        ;;
      no_status)
        echo -e "\e[${cl[powercl]}m$TYPE\e[0m"
        ;;
      *)
        echo -e "\e[${cl[powercl]}m$TYPE ($ADP1sts)\e[0m"
        ;;
    esac
  elif [ -d "/sys/class/power_supply/AC" ]; then
    TYPE="AC"
    case "$power" in
      full)
        echo -e "\e[${cl[powercl]}m$TYPE ($ACsts)\e[0m"
        ;;
      hide_type)
        echo -e "\e[${cl[powercl]}m$ACsts\e[0m"
        ;;
      hide_plugged)
        if [ "$AC" -eq 1 ]; then
          echo -e "\e[${cl[powercl]}m$TYPE\e[0m"
        else
          echo -e "\e[${cl[powercl]}m$TYPE ($ACsts)\e[0m"
        fi
        ;;
      hide_unplugged)
        if [ "$AC" -eq 0 ]; then
          echo -e "\e[${cl[powercl]}m$TYPE\e[0m"
        else
          echo -e "\e[${cl[powercl]}m$TYPE ($ACsts)\e[0m"
        fi
        ;;
      no_status)
        echo -e "\e[${cl[powercl]}m$TYPE\e[0m"
        ;;
      *)
        echo -e "\e[${cl[powercl]}m$TYPE ($ACsts)\e[0m"
        ;;
    esac
  else
    echo -e "\e[${cl[powercl]}m[unknown_power_source]\e[0m"
  fi
}

tuptime() {
  local full no_second tiny tiny_no_second
  full=$(awk '{print int($1/3600)"hours "int(($1%3600)/60)"minutes "int($1%60)"seconds"}' /proc/uptime)
  no_second=$(awk '{print int($1/3600)"hours "int(($1%3600)/60)"minutes"}' /proc/uptime)
  tiny=$(awk '{print int($1/3600)"h "int(($1%3600)/60)"m "int($1%60)"s"}' /proc/uptime)
  tiny_no_second=$(awk '{print int($1/3600)"h "int(($1%3600)/60)"m"}' /proc/uptime)

  case "$uptime" in
    full)
      echo -e "\e[${cl[uptimecl]}m$full\e[0m"
      ;;
    no_second)
      echo -e "\e[${cl[uptimecl]}m$no_second\e[0m"
      ;;
    tiny)
      echo -e "\e[${cl[uptimecl]}m$tiny\e[0m"
      ;;
    tiny_no_second)
      echo -e "\e[${cl[uptimecl]}m$tiny_no_second\e[0m"
      ;;
    *)
      echo -e "\e[${cl[uptimecl]}m$tiny_no_second\e[0m"
      ;;
  esac
}

newline() {
  echo ""
}

yield() {
  if [ "$#" -eq 2 ]; then
    case "$separator" in
      hide)
        echo -en "\e[${cl[textcl]}m$1\e[0m "
        ;;
      *)
        echo -en "\e[${cl[textcl]}m$1\e[0m \e[${cl[separatorcl]}m$separator\e[0m "
        ;;
    esac
    if declare -F "$2" > /dev/null; then
      "$2"
    else
      echo -e "\e[${cl[textcl]}m$2\e[0m"
    fi
  elif [ "$#" -eq 1 ]; then
    if declare -F "$1" > /dev/null; then
      "$1"
    elif [ "$1" = "newline" ]; then
      newline
    else
      echo -e "\e[${cl[textcl]}m$1\e[0m"
    fi
  else
    echo -e "Usage: yield [string] [string|function]"
    echo -e "       yield [string|function]"
  fi
}

tuxify